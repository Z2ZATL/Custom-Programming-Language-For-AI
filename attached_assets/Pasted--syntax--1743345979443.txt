ผมจะอธิบาย syntax ของภาษาโปรแกรมมิ่งนี้ให้ครบถ้วน พร้อมยกตัวอย่างสำหรับทุกคำสั่งตามที่คุณขอครับ ภาษานี้ถูกออกแบบมาให้เรียบง่ายและเหมาะสำหรับงานที่เกี่ยวข้องกับ AI โดยมีโครงสร้างที่ชัดเจนและต้องใช้คำสั่งตามลำดับที่กำหนดอย่างเคร่งครัด

---

## **Syntax ของภาษา**

### 1. **คำสั่งเริ่มต้น: `start`**
- **ความหมาย**: ใช้เพื่อเริ่มต้นการทำงานของโปรแกรม
- **เงื่อนไข**:
  - ต้องเป็นคำสั่งแรกในโค้ดเสมอ
  - ต้องอยู่คนเดียวในบรรทัดแรก ไม่มีคำสั่งอื่นในบรรทัดเดียวกัน
- **ตัวอย่าง**:
  ```
  start
  ```
- **ผลลัพธ์**: "Program started"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าไม่มี `start` เป็นคำสั่งแรก: "Error: Must start with 'start' command"
  - ถ้ามีคำสั่งอื่นในบรรทัดเดียวกับ `start`: "Error: 'start' must be the only command on the first line"

---

### 2. **คำสั่งสร้างโปรเจกต์: `create [type]`**
- **ความหมาย**: ใช้กำหนดประเภทของ AI ที่จะพัฒนา เช่น Machine Learning (ML), Deep Learning (DL), หรือ Reinforcement Learning (RL)
- **เงื่อนไข**:
  - ต้องเป็นคำสั่งที่สอง ต่อจาก `start`
  - ต้องอยู่ในบรรทัดที่สอง
- **ตัวอย่าง**:
  ```
  start
  create ML
  ```
  - กำหนดประเภทเป็น Machine Learning  
  - ผลลัพธ์: "Project created: Machine Learning"
  ```
  start
  create DL
  ```
  - กำหนดประเภทเป็น Deep Learning  
  - ผลลัพธ์: "Project created: Deep Learning"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าใช้ก่อน `start`: "Error: Must start with 'start' command"
  - ถ้าไม่มี `create [type]` หลัง `start`: "Error: Must specify project type with 'create [type]'"

---

### 3. **คำสั่งโหลดข้อมูล: `load dataset "[filename]"`**
- **ความหมาย**: ใช้โหลดข้อมูลจากไฟล์ CSV เข้ามาในโปรเจกต์
- **เงื่อนไข**:
  - ต้องใช้หลังจาก `create [type]`
  - ไฟล์ต้องเป็นนามสกุล `.csv`
- **ตัวอย่าง**:
  ```
  start
  create ML
  load dataset "data.csv"
  ```
  - โหลดไฟล์ "data.csv" สำหรับ Machine Learning  
  - ผลลัพธ์: "Dataset loaded successfully"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าไฟล์ไม่ใช่ `.csv`: "Error: File must be a CSV"
  - ถ้าไฟล์ไม่พบ: "Error: File not found"
  - ถ้าใช้ก่อน `create [type]`: "Error: Must create project type first"

---

### 4. **คำสั่งสร้างโมเดล: `create model [model_name]`**
- **ความหมาย**: ใช้สร้างโมเดล AI ตามประเภทที่กำหนด
- **เงื่อนไข**:
  - ต้องใช้หลังจาก `load dataset`
  - โมเดลต้องเข้ากันได้กับประเภท AI ที่เลือก
- **ตัวอย่าง**:
  ```
  start
  create ML
  load dataset "data.csv"
  create model LinearRegression
  ```
  - สร้างโมเดล Linear Regression สำหรับ ML  
  - ผลลัพธ์: "Model created: LinearRegression"
  ```
  start
  create DL
  load dataset "images.csv"
  create model NeuralNetwork
  ```
  - สร้างโมเดล Neural Network สำหรับ DL  
  - ผลลัพธ์: "Model created: NeuralNetwork"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าใช้ก่อน `load dataset`: "Error: Must load dataset first"
  - ถ้าโมเดลไม่เข้ากับประเภท AI: "Error: Model not compatible with project type"

---

### 5. **คำสั่งเทรนโมเดล: `train model`**
- **ความหมาย**: ใช้เริ่มกระบวนการฝึกโมเดลด้วยข้อมูลที่โหลดมา
- **เงื่อนไข**:
  - ต้องใช้หลังจาก `create model`
- **ตัวอย่าง**:
  ```
  start
  create ML
  load dataset "data.csv"
  create model LinearRegression
  train model
  ```
  - ฝึกโมเดล Linear Regression  
  - ผลลัพธ์: "Training complete"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าใช้ก่อน `create model`: "Error: Must create model first"
  - ถ้าไม่มีข้อมูล: "Error: No dataset loaded"

---

### 6. **คำสั่งแสดงความแม่นยำ: `show accuracy`**
- **ความหมาย**: ใช้แสดงผลความแม่นยำของโมเดลหลังจากฝึกเสร็จ
- **เงื่อนไข**:
  - ต้องใช้หลังจาก `train model`
- **ตัวอย่าง**:
  ```
  start
  create ML
  load dataset "data.csv"
  create model LinearRegression
  train model
  show accuracy
  ```
  - แสดงผล เช่น "Accuracy: 85.5%"
- **ข้อผิดพลาดที่อาจเกิดขึ้น**:
  - ถ้าใช้ก่อน `train model`: "Error: Model not trained yet"

---

## **ลำดับการทำงาน**
ภาษานี้มีลำดับการทำงานที่ชัดเจนและต้องปฏิบัติตามอย่างเคร่งครัด:
1. **เริ่มต้นด้วย `start`**  
   - คำสั่งแรกในบรรทัดแรก
2. **กำหนดประเภทโปรเจกต์ด้วย `create [type]`**  
   - คำสั่งที่สองในบรรทัดที่สอง
3. **โหลดข้อมูลด้วย `load dataset "[filename]"`**  
   - ใช้หลังจากกำหนดประเภท
4. **สร้างโมเดลด้วย `create model [model_name]`**  
   - ใช้หลังจากโหลดข้อมูล
5. **เทรนโมเดลด้วย `train model`**  
   - ใช้หลังจากสร้างโมเดล
6. **แสดงผลลัพธ์ด้วย `show accuracy`**  
   - ใช้หลังจากเทรนโมเดล

**หมายเหตุ**: หากข้ามขั้นตอนหรือใช้คำสั่งไม่ถูกต้อง Interpreter จะแสดงข้อผิดพลาดทันที

---

## **ตัวอย่างโค้ดเต็มรูปแบบ**
นี่คือตัวอย่างโค้ดที่ครบถ้วนตาม syntax:
```
start
create ML
load dataset "data.csv"
create model LinearRegression
train model
show accuracy
```
- **ผลลัพธ์ที่คาดหวัง**:
  - "Program started"
  - "Project created: Machine Learning"
  - "Dataset loaded successfully"
  - "Model created: LinearRegression"
  - "Training complete"
  - "Accuracy: 85.5%"

---

## **การจัดการข้อผิดพลาด**
Interpreter จะตรวจสอบ syntax และลำดับการทำงานอย่างเข้มงวด นี่คือตัวอย่างข้อผิดพลาดที่อาจเกิดขึ้น:

- **ถ้าไม่มี `start` เป็นคำสั่งแรก**:
  ```
  create ML
  load dataset "data.csv"
  ```
  - ผลลัพธ์: "Error: Must start with 'start' command"

- **ถ้ามีคำสั่งอื่นในบรรทัดเดียวกับ `start`**:
  ```
  start create ML
  ```
  - ผลลัพธ์: "Error: 'start' must be the only command on the first line"

- **ถ้าใช้ `create model` ก่อน `load dataset`**:
  ```
  start
  create ML
  create model LinearRegression
  ```
  - ผลลัพธ์: "Error: Must load dataset first"

- **ถ้าใช้ `show accuracy` ก่อน `train model`**:
  ```
  start
  create ML
  load dataset "data.csv"
  create model LinearRegression
  show accuracy
  ```
  - ผลลัพธ์: "Error: Model not trained yet"

---
