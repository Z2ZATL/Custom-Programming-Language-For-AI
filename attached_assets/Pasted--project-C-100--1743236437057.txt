"ฉันต้องการให้คุณช่วยสร้าง project ด้วยภาษา C++ ที่สามารถทำงานได้อย่างสมบูรณ์ 100% โดยขอให้คุณพัฒนา project นี้ทีละขั้นตอนตามส่วนต่าง ๆ ที่ระบุด้านล่างนี้ เพื่อให้มั่นใจว่าโค้ดมีโครงสร้างดี ทำงานได้ถูกต้อง และสามารถคอมไพล์ได้จริง:

1. **การตั้งค่าโครงสร้างพื้นฐานของ project**  
   - สร้างไฟล์ CMakeLists.txt เพื่อใช้ CMake ในการจัดการการคอมไพล์ project  
   - ตั้งค่าให้รองรับการใช้ Standard Template Library (STL) และไลบรารีเพิ่มเติมที่จำเป็น (เช่น Eigen สำหรับการคำนวณเชิงเส้น หาก project นี้เกี่ยวข้องกับ AI หรือ machine learning)  
   - สร้างโครงสร้างโฟลเดอร์ เช่น `src/`, `include/`, tests/ และ build/

2. **การจัดการข้อมูล**  
   - เขียนคลาสหรือฟังก์ชันสำหรับการอ่านข้อมูลจากไฟล์ เช่น ไฟล์ CSV หรือ JSON  
   - จัดการข้อมูลให้อยู่ในรูปแบบที่เหมาะสมสำหรับการประมวลผล เช่น เก็บใน std::vector หรือ std::map  
   - เพิ่มฟังก์ชันสำหรับการเขียนผลลัพธ์กลับไปยังไฟล์

3. **การประมวลผลข้อมูล**  
   - สร้างฟังก์ชันสำหรับประมวลผลข้อมูล เช่น การคำนวณค่าเฉลี่ย, การกรองข้อมูลที่มีค่าเกินเกณฑ์ หรือการแปลงข้อมูลให้อยู่ในรูปแบบที่โมเดลสามารถใช้งานได้  
   - ใช้โครงสร้างข้อมูลที่เหมาะสม เช่น std::vector หรือ std::array เพื่อประสิทธิภาพสูงสุด

4. **การสร้างโมเดล (ถ้ามี)**  
   - หาก project นี้เกี่ยวข้องกับ AI หรือ machine learning ให้สร้างคลาสสำหรับโมเดล เช่น โมเดล Linear Regression หรือ Logistic Regression  
   - ใช้ไลบรารี Eigen หรือเขียนอัลกอริทึมด้วยตัวเองสำหรับการคำนวณเมทริกซ์หรือเวกเตอร์  
   - กำหนดโครงสร้างของโมเดลให้ชัดเจน เช่น การกำหนดพารามิเตอร์ (weights, bias)

5. **การฝึกโมเดล**  
   - เขียนฟังก์ชันสำหรับการฝึกโมเดลโดยใช้ข้อมูลที่เตรียมไว้  
   - รองรับการตั้งค่าพารามิเตอร์ เช่น learning rate, จำนวน epochs และ batch size  
   - เพิ่มการคำนวณ loss function เช่น Mean Squared Error (MSE) เพื่อตรวจสอบประสิทธิภาพระหว่างการฝึก

6. **การประเมินโมเดล**  
   - สร้างฟังก์ชันสำหรับประเมินโมเดล เช่น การคำนวณ accuracy, precision, recall หรือ F1-score  
   - รองรับการเปรียบเทียบผลลัพธ์ระหว่างข้อมูลจริงและการทำนายของโมเดล

7. **การใช้งานโมเดลหรือฟังก์ชันหลัก**  
   - เขียนฟังก์ชันสำหรับการใช้งานโมเดลที่ฝึกแล้วกับข้อมูลใหม่ หรือฟังก์ชันหลักของ project หากไม่ใช่ AI  
   - ออกแบบให้ใช้งานง่าย เช่น รับ input จากผู้ใช้ผ่าน command line หรือไฟล์

8. **การจัดการข้อผิดพลาด**  
   - เพิ่มระบบการจัดการข้อผิดพลาด เช่น การใช้ try-catch สำหรับ exceptions  
   - ตรวจสอบ input ที่ไม่ถูกต้อง และแจ้งเตือนผู้ใช้ผ่านข้อความที่ชัดเจน  
   - สร้างระบบ logging เพื่อบันทึกข้อผิดพลาดลงไฟล์ (เช่น ใช้ `std::ofstream`)

9. **การทดสอบ**  
   - เขียน unit tests สำหรับทุกฟังก์ชันหลัก โดยใช้ framework เช่น Google Test (`gtest`)  
   - ทดสอบว่าแต่ละส่วนทำงานได้ถูกต้อง เช่น การอ่านไฟล์, การคำนวณ, และการทำนายผล

10. **การจัดทำเอกสาร**  
    - สร้างไฟล์ README.md ที่อธิบายวิธีการคอมไพล์และรัน project  
    - เพิ่มคอมเมนต์ในโค้ดเพื่ออธิบายการทำงานของแต่ละฟังก์ชันและคลาส  
    - อธิบายขั้นตอนการติดตั้งไลบรารีที่จำเป็น (ถ้ามี)

**คำแนะนำเพิ่มเติม:**  
- โปรดให้โค้ด C++ ที่สมบูรณ์สำหรับแต่ละส่วน พร้อมคำอธิบายสั้น ๆ ในคอมเมนต์ของโค้ด เพื่อให้ฉันเข้าใจการทำงานและสามารถปรับปรุงได้  
- ใช้การเขียนโค้ดที่สะอาด (clean code) เช่น การตั้งชื่อตัวแปรและฟังก์ชันที่เข้าใจง่าย และการแบ่งโค้ดเป็นโมดูล  
- หากมีส่วนใดที่คุณไม่แน่ใจในรายละเอียด (เช่น ประเภทของ project หรือข้อมูลที่ใช้) โปรดสมมติตัวอย่างที่เหมาะสม เช่น การวิเคราะห์ข้อมูลจากไฟล์ CSV หรือการสร้างโมเดล AI พื้นฐาน  

ฉันต้องการให้คุณสร้างโค้ดและอธิบายขั้นตอนทั้งหมดนี้อย่างละเอียด เพื่อให้ project นี้สามารถคอมไพล์และรันได้จริง 100% หลังจากที่ฉันนำโค้ดไปทดสอบและปรับแต่งตามความจำเป็น"

---

### คำอธิบายเกี่ยวกับ Prompt นี้

prompt นี้ถูกออกแบบมาให้ครอบคลุมทุกขั้นตอนที่จำเป็นในการสร้าง project ด้วยภาษา C++ โดยแบ่งเป็นส่วน ๆ ที่ชัดเจน เพื่อให้ AI สามารถจัดการได้ และให้ผลลัพธ์ที่เป็นโค้ดพื้นฐานที่คุณสามารถนำไปต่อยอดได้:

- **ความสมบูรณ์**: ขั้นตอนทั้ง 10 ครอบคลุมตั้งแต่การตั้งค่าไปจนถึงการทดสอบและเอกสาร ทำให้มั่นใจว่า project มีโครงสร้างครบถ้วน  
- **ความยืดหยุ่น**: prompt นี้สามารถใช้ได้กับ project ประเภทต่าง ๆ ไม่ว่าจะเป็น AI, การวิเคราะห์ข้อมูล หรือโปรแกรมทั่วไป โดย AI สามารถปรับแต่งตามบริบทได้  
- **การใช้งานจริง**: การระบุให้ใช้ CMake, STL, และ unit tests ช่วยให้ project สามารถคอมไพล์และรันได้จริงในสภาพแวดล้อมจริง  
- **การตรวจสอบโดยมนุษย์**: แม้ว่า prompt จะขอให้ AI สร้างโค้ดที่ใช้ได้ 100% แต่ฉันแนะนำให้คุณตรวจสอบและทดสอบโค้ดที่ได้ เพื่อแก้ไขข้อผิดพลาดที่อาจเกิดจากข้อจำกัดของ AI