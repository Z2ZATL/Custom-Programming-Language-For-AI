-- Configuring done (0.0s)
-- Generating done (0.0s)
-- Build files have been written to: /home/runner/workspace/ai_language/build
[  6%] Building CXX object CMakeFiles/ai_language_lib.dir/src/interpreters/MLInt[ 12%] Building CXX object CMakeFiles/ai_language_lib.dir/src/interpreters/InterpreterFactory.cpp.o
[ 18%] Linking CXX static library libai_language_lib.a
[ 75%] Built target ai_language_lib
[ 87%] Built target show_time
[ 93%] Linking CXX executable /home/runner/workspace/ai_language/ai_lang
[100%] Built target ai_lang
DEBUG: Starting ai_lang with 2 arguments
DEBUG: First argument is comprehensive_test.ai
Starting Machine Learning interpreter...
Starting Machine Learning interpreter...
Creating ML environment
Loading dataset from: "datasets/linear_data.csv"
Set target_column = "y"
Set feature_columns = ["x1",
Validating dataset...
Checking for missing values...
Checking data types...
Checking for outliers...
Dataset validation complete: Data quality looks good
- No missing values detected
- All features have appropriate data types
- No significant outliers detected
Preprocessing data using dataset method...
Applying standard preprocessing for dataset type...
Dataset preprocessing complete: Applied standard transformations
Splitting dataset into: 80% , 20% 
Creating ML model of type: LinearRegression
Model created successfully.
Set learning_rate = 0.01
Set epochs = 100
Training ML model...
Evaluating ML model performance...
Model accuracy: 0.95
Model loss: 0.05
Creating learning_curves plot...
Generating learning curve plot
DataFrame columns: ['epoch', 'loss', 'accuracy']
DataFrame shape: (100, 3)
First few rows:    epoch      loss  accuracy
0      1  0.794756  0.661763
1      2  0.770340  0.673065
2      3  0.746725  0.683924
PNG graph saved to: Program test/Data/learning_curves.png
Note: mpld3 package not found. Interactive HTML graph not created.
To enable interactive graphs, install mpld3 with: pip install mpld3
Graph saved successfully to Program test/Data
ข้อมูลได้รับการบันทึกเป็นไฟล์ CSV: ai_language/Program test/Data/learning_curves_data.csv
กราฟถูกสร้างและบันทึกเป็นไฟล์ PNG: ai_language/Program test/Data/learning_curves.png
Learning curve plot saved to: ai_language/Program test/Data/learning_curves.png
Making prediction with LinearRegression model on input data: 2.3 4.5 
Prediction result: 8.85
Saving ML model to: Program test/model/ml_test_model.mlmodel
Model successfully saved to: Program test/model/ml_test_model.mlmodel
โมเดลถูกบันทึกไปที่ 'ai_language/Program test/model/ml_test_model.mlmodel'
Starting Machine Learning interpreter...
Creating DL model.
Loading dataset from: "datasets/iris.csv"
Set target_column = "species"
Set feature_columns = ["sepal_length",
Validating dataset...
Checking for missing values...
Checking data types...
Checking for outliers...
Dataset validation complete: Data quality looks good
- No missing values detected
- All features have appropriate data types
- No significant outliers detected
Preprocessing data using dataset method...
Applying standard preprocessing for dataset type...
Dataset preprocessing complete: Applied standard transformations
Splitting dataset into: 70% , 20% , 10% 
Creating ML model of type: NeuralNetwork
Warning: Model type 'NeuralNetwork' might not be fully supported for ML.
Model created successfully.
Warning: Layer type 'Dense' may not be fully supported.
Added Dense layer
Warning: Layer type 'Dense' may not be fully supported.
Added Dense layer
Warning: Layer type 'Dense' may not be fully supported.
Added Dense layer
Set optimizer = "adam"
Set loss = "categorical_crossentropy"
Set learning_rate = 0.001
Set batch_size = 32
Set epochs = 50
Training ML model...
Evaluating ML model performance...
Model accuracy: 0.95
Model loss: 0.05
Creating learning_curves plot...
Generating learning curve plot
DataFrame columns: ['epoch', 'loss', 'accuracy']
DataFrame shape: (50, 3)
First few rows:    epoch      loss  accuracy
0      1  0.794756  0.661763
1      2  0.770340  0.673065
2      3  0.746725  0.683924
PNG graph saved to: Program test/Data/learning_curves.png
Note: mpld3 package not found. Interactive HTML graph not created.
To enable interactive graphs, install mpld3 with: pip install mpld3
Graph saved successfully to Program test/Data
ข้อมูลได้รับการบันทึกเป็นไฟล์ CSV: ai_language/Program test/Data/learning_curves_data.csv
กราฟถูกสร้างและบันทึกเป็นไฟล์ PNG: ai_language/Program test/Data/learning_curves.png
Learning curve plot saved to: ai_language/Program test/Data/learning_curves.png
Making prediction with NeuralNetwork model on input data: 3.5 1.4 0.2 2.9 4.3 1.3 
Prediction result: 15.22
Saving ML model to: Program test/model/dl_test_model.dlmodel
Model successfully saved to: Program test/model/dl_test_model.dlmodel
โมเดลถูกบันทึกไปที่ 'ai_language/Program test/model/dl_test_model.dlmodel'
Starting Machine Learning interpreter...
Creating RL model.
Loading environment from: "datasets/environment.json"
Error: Could not open environment file.
Set state_size = 4
Set action_size = 2
Creating ML model of type: QLearning
Warning: Model type 'QLearning' might not be fully supported for ML.
Model created successfully.
Set learning_rate = 0.1
Set discount_factor = 0.99
Set exploration_rate = 0.8
Set exploration_decay = 0.995
Set min_exploration_rate = 0.01
Set episodes = 100
Training ML model...
Evaluating ML model performance...
Showing reward for RL model...
Episode Reward  Avg Reward (last 100)
---------------------------------------
10  53  44
20  74  58
30  91  71
40  105 83
50  116 92
60  126 100
70  133 106
80  139 111
90  144 116
100 148 120

Final average reward (last 100 episodes): 120
Excellent reward performance achieved!
Reward data saved to: ai_language/Program test/Data/reward_data.csv

Reward Trend:
-------------
 140.0 |                                        *
 123.9 |                               *
 107.8 |                        *
  91.7 |                 *
  75.6 |          *
  59.4 |     *
  43.3 |  *
  27.2 |
  11.1 |
  -5.0 |
       ----------------------------------------
       10                                   100
Q-table for RL model (QLearning):
State\Action    A0  A1  A2  A3
------------    --  --  --  --
S0  107.0   113.7   95.9    113.8   (Best: A3)
S1  118.0   119.4   121.4   107.0   (Best: A2)
S2  134.9   125.2   118.0   125.9   (Best: A0)
S3  137.0   146.5   139.9   148.3   (Best: A3)
S4  159.8   139.8   154.7   152.6   (Best: A0)
S5  159.0   156.2   171.5   154.4   (Best: A2)
S6  161.0   173.5   165.6   170.3   (Best: A1)
S7  176.0   177.0   182.4   175.0   (Best: A2)
S8  190.9   181.4   184.7   183.6   (Best: A0)
S9  188.3   190.8   193.8   195.1   (Best: A3)

Note: Highlighted values represent the highest Q-value for each state.
The agent will choose actions with the highest Q-values (exploitation) with probability (1-ε).
Current exploration rate (ε): 0.8
Q-table data saved to: ai_language/Program test/Data/qtable_data.csv

Policy visualization (best action for each state):
------------------------------------------------
S0  S1  S2  S3  S4  
 ←   ↓   ↑   ←   ↑  
S5  S6  S7  S8  S9  
 ↓   →   ↓   ↑   ←
Creating learning_curves plot...
Generating learning curve plot
DataFrame columns: ['epoch', 'loss', 'accuracy']
DataFrame shape: (50, 3)
First few rows:    epoch      loss  accuracy
0      1  0.794756  0.661763
1      2  0.770340  0.673065
2      3  0.746725  0.683924
PNG graph saved to: Program test/Data/learning_curves.png
Note: mpld3 package not found. Interactive HTML graph not created.
To enable interactive graphs, install mpld3 with: pip install mpld3
Graph saved successfully to Program test/Data
ข้อมูลได้รับการบันทึกเป็นไฟล์ CSV: ai_language/Program test/Data/learning_curves_data.csv
กราฟถูกสร้างและบันทึกเป็นไฟล์ PNG: ai_language/Program test/Data/learning_curves.png
Learning curve plot saved to: ai_language/Program test/Data/learning_curves.png
Making prediction with QLearning model on input data: 0.3 0.1 0.4 
Prediction result: 5.49
Saving ML model to: Program test/model/rl_test_model.rlmodel
Model successfully saved to: Program test/model/rl_test_model.rlmodel
โมเดลถูกบันทึกไปที่ 'ai_language/Program test/model/rl_test_model.rlmodel'
Starting Machine Learning interpreter...
Creating ML environment
Loading ML model from: "ml_test_model.mlmodel"
Making prediction with QLearning model on input data: 3.2 
Prediction result: 6.6
Model Information:
Type: QLearning
Status: Trained

Parameters:
- action_size: 2
- batch_size: 32
- discount_factor: 0.99
- episodes: 100
- epochs: 50
- exploration_decay: 0.995
- exploration_rate: 0.8
- feature_columns: ["sepal_length",
- learning_rate: 0.1
- loss: "categorical_crossentropy"
- min_exploration_rate: 0.01
- optimizer: "adam"
- state_size: 4
- target_column: "species"

Performance:
- Accuracy: 0.95
- Loss: 0.05
Starting Machine Learning interpreter...
Creating DL model.
Loading ML model from: "dl_test_model.dlmodel"
Making prediction with QLearning model on input data: 3 5.1 1.8 
Prediction result: 10.82
Model Information:
Type: QLearning
Status: Trained

Parameters:
- action_size: 2
- batch_size: 32
- discount_factor: 0.99
- episodes: 100
- epochs: 50
- exploration_decay: 0.995
- exploration_rate: 0.8
- feature_columns: ["sepal_length",
- learning_rate: 0.1
- loss: "categorical_crossentropy"
- min_exploration_rate: 0.01
- optimizer: "adam"
- state_size: 4
- target_column: "species"

Performance:
- Accuracy: 0.95
- Loss: 0.05
Starting Machine Learning interpreter...
Creating RL model.
Loading ML model from: "rl_test_model.rlmodel"
Making prediction with QLearning model on input data: 0.5 0.5 0.5 
Prediction result: 5.9
Model Information:
Type: QLearning
Status: Trained

Parameters:
- action_size: 2
- batch_size: 32
- discount_factor: 0.99
- episodes: 100
- epochs: 50
- exploration_decay: 0.995
Screen cleared
Exiting program...