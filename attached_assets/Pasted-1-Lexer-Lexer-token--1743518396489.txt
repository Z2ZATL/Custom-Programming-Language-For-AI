1. Lexer (ตัวแยกคำ)
Lexer มีหน้าที่แยกข้อความโค้ดเป็นหน่วยย่อยที่เรียกว่า token (เช่น คำสำคัญ, ตัวดำเนินการ, ตัวแปร, และค่าคงที่) คุณสมบัติที่สำคัญของ lexer มีดังนี้:

ความแม่นยำในการจดจำ token: ต้องสามารถแยกแยะ token แต่ละประเภทได้อย่างถูกต้อง เช่น แยกตัวเลขจากตัวอักษร หรือแยกคำสำคัญ (เช่น if, while) จากชื่อตัวแปร
การจัดการช่องว่างและความคิดเห็น: ต้องสามารถข้ามหรือละเว้นช่องว่าง (whitespace) และความคิดเห็น (comments) ที่ไม่มีความหมายในโค้ด
การตรวจสอบข้อผิดพลาดเบื้องต้น: ต้องตรวจจับข้อผิดพลาดง่ายๆ เช่น อักขระที่ไม่รู้จักหรือไม่ถูกต้องตามกฎของภาษา
ประสิทธิภาพ: ต้องทำงานได้อย่างรวดเร็ว เนื่องจากเป็นขั้นตอนแรกของการประมวลผลโค้ด
2. Parser (ตัวแยกวิเคราะห์)
Parser รับ token จาก lexer และตรวจสอบว่าลำดับของ token นั้นถูกต้องตามไวยากรณ์ของภาษาหรือไม่ พร้อมทั้งสร้างโครงสร้างข้อมูล เช่น parse tree หรือ abstract syntax tree (AST) คุณสมบัติที่สำคัญของ parser มีดังนี้:

การตรวจสอบไวยากรณ์: ต้องตรวจสอบว่าโค้ดเป็นไปตามกฎไวยากรณ์ของภาษา เช่น การจัดวางคำสั่ง, การใช้เครื่องหมาย (เช่น ;, {}), และการเรียงลำดับคำสั่ง
การสร้างโครงสร้างต้นไม้: ต้องสร้าง parse tree หรือ AST ที่แสดงถึงโครงสร้างของโค้ดอย่างถูกต้อง เช่น ลำดับการดำเนินการหรือการซ้อนของคำสั่ง
การจัดการข้อผิดพลาดทางไวยากรณ์: ต้องตรวจจับและรายงานข้อผิดพลาด เช่น การขาดเครื่องหมาย, การใช้คำสั่งไม่ถูกต้อง, หรือการเรียงลำดับที่ผิด
ความยืดหยุ่น: ควรรองรับไวยากรณ์ที่ซับซ้อนและหลากหลายของภาษา
3. Interpreter (ตัวแปล)
Interpreter รับ AST จาก parser และดำเนินการตามคำสั่งที่กำหนดไว้ในโค้ด คุณสมบัติที่สำคัญของ interpreter มีดังนี้:

การดำเนินการตามลำดับ: ต้องดำเนินการคำสั่งตามลำดับที่ถูกต้องตาม AST
การจัดการตัวแปรและสภาพแวดล้อม: ต้องจัดการกับตัวแปร, ขอบเขต (scope), และสภาพแวดล้อมการทำงาน (environment) ได้อย่างถูกต้อง
การรองรับฟังก์ชันและการเรียกใช้: ต้องจัดการกับการกำหนดและเรียกใช้ฟังก์ชัน รวมถึงการส่งผ่านพารามิเตอร์และการคืนค่า
การจัดการข้อผิดพลาดขณะรัน: ต้องตรวจจับและรายงานข้อผิดพลาดที่เกิดขึ้นขณะรันโค้ด เช่น การหารด้วยศูนย์, การเข้าถึงตัวแปรที่ไม่มีการกำหนด, หรือการเรียกใช้ฟังก์ชันที่ไม่มีอยู่
ประสิทธิภาพ: ต้องทำงานได้อย่างมีประสิทธิภาพ โดยเฉพาะกับโค้ดที่มีความซับซ้อนหรือขนาดใหญ่